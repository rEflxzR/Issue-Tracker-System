[{"/home/reflxzr/Documents/React/bug-tracker/src/index.js":"1","/home/reflxzr/Documents/React/bug-tracker/src/reportWebVitals.js":"2","/home/reflxzr/Documents/React/bug-tracker/src/App.js":"3","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboard/userdashboard.js":"4","/home/reflxzr/Documents/React/bug-tracker/src/Components/Landingpage/landingpage.js":"5","/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/passwordreset.js":"6","/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/loginbox.js":"7","/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/signupbox.js":"8","/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/newpassword.js":"9","/home/reflxzr/Documents/React/bug-tracker/src/Components/Navbars/navbar.js":"10","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/homepage.js":"11","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/usertickets.js":"12","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/userprojects.js":"13","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/profile.js":"14","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/manageusers.js":"15","/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/manageprojects.js":"16","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/tablebox.js":"17","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/modal.js":"18","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/displaybox.js":"19","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/editbox.js":"20","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/deletebox.js":"21"},{"size":543,"mtime":1614853463672,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1611993292957,"results":"24","hashOfConfig":"23"},{"size":659,"mtime":1618221445339,"results":"25","hashOfConfig":"23"},{"size":754,"mtime":1618221450724,"results":"26","hashOfConfig":"23"},{"size":2888,"mtime":1618409814920,"results":"27","hashOfConfig":"23"},{"size":2326,"mtime":1618331790132,"results":"28","hashOfConfig":"23"},{"size":2701,"mtime":1618331781856,"results":"29","hashOfConfig":"23"},{"size":5390,"mtime":1618331794572,"results":"30","hashOfConfig":"23"},{"size":3777,"mtime":1618331787944,"results":"31","hashOfConfig":"23"},{"size":6004,"mtime":1616827793160,"results":"32","hashOfConfig":"23"},{"size":234,"mtime":1616923943389,"results":"33","hashOfConfig":"23"},{"size":15879,"mtime":1618499617023,"results":"34","hashOfConfig":"23"},{"size":5343,"mtime":1618506027380,"results":"35","hashOfConfig":"23"},{"size":269,"mtime":1615630521104,"results":"36","hashOfConfig":"23"},{"size":6898,"mtime":1618232015523,"results":"37","hashOfConfig":"23"},{"size":12298,"mtime":1618476556915,"results":"38","hashOfConfig":"23"},{"size":6288,"mtime":1618338160719,"results":"39","hashOfConfig":"23"},{"size":4855,"mtime":1618499657948,"results":"40","hashOfConfig":"23"},{"size":2391,"mtime":1617608957019,"results":"41","hashOfConfig":"23"},{"size":13878,"mtime":1618499686524,"results":"42","hashOfConfig":"23"},{"size":1974,"mtime":1618417041836,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"us95ny",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/reflxzr/Documents/React/bug-tracker/src/index.js",[],["89","90"],"/home/reflxzr/Documents/React/bug-tracker/src/reportWebVitals.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/App.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboard/userdashboard.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Landingpage/landingpage.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/passwordreset.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/loginbox.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/signupbox.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Loginpages/newpassword.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Navbars/navbar.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/homepage.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/usertickets.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/userprojects.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/profile.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/manageusers.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Dashboardcomponents/manageprojects.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/tablebox.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/modal.js",[],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/displaybox.js",[],["91","92"],"/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/editbox.js",["93"],"import React, { Component } from 'react'\nimport axios from 'axios'\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select'\nimport Button from '@material-ui/core/Button'\nimport './editbox.css'\nimport { capitalize } from '@material-ui/core';\n\n\nconst userRole = window.localStorage.getItem(\"Role\")\n\n\nclass Editbox extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ...props.entityInfo,\n            allDevs: [],\n            allTesters: [],\n            comment: \"\",\n            oldTitle: props.entityInfo.title\n        }\n\n        this.editFormInputFieldChange = this.editFormInputFieldChange.bind(this)\n        this.editFormSelectFieldChange = this.editFormSelectFieldChange.bind(this)\n        this.handleEditFormButtonClick = this.handleEditFormButtonClick.bind(this)\n    }\n\n    async componentDidMount() {\n        const url = `http://${window.location.hostname}:3000/projectdevsandtesters`\n        const title = this.props.modalCategory===\"Ticket\" ? this.props.projectName : this.props.entityInfo.title\n        const requirement = this.props.modalCategory===\"Ticket\" ? \"only project\" : \"all\"\n        const manager = this.props.projectManager\n        await axios.get(url, {headers: {title, requirement, manager}})\n        .then((res) => {\n            this.setState({ allDevs: res.data.devs, allTesters: res.data.testers })\n        })\n        .catch((err) => {\n            console.log(\"Could Not Send A Request to the Backend\")\n            console.log(err)\n        })\n    }\n\n    editFormInputFieldChange(evt) {\n        const { id } = evt.currentTarget\n        this.setState({ [id]: evt.currentTarget.value })\n    }\n\n    editFormSelectFieldChange(evt) {\n        const id = evt.currentTarget.getAttribute(\"menuid\")\n        const value = evt.currentTarget.getAttribute(\"data-value\")\n\n        if( this.props.modalCategory===\"Project\" || id===\"developers\" || id===\"testers\") {\n            const indexval = this.state[id].indexOf(value)\n            if(indexval===-1) {\n                this.setState({ [id]: [value, ...this.state[id]] })\n            }\n            else {\n                let arr = [...this.state[id]]\n                arr = arr.slice(0, indexval).concat(arr.slice(indexval+1))\n                this.setState({ [id]: arr})\n            }\n        }\n        else {\n            if(id===\"developer assigned\") {\n                this.setState({ [id]: value, status: \"In Progress\" })\n            }\n            else {\n                this.setState({ [id]: value })\n            }\n        }\n    }\n\n    async handleEditFormButtonClick(evt) {\n        const id = evt.currentTarget.getAttribute(\"buttonid\")\n        if(id===\"reset\") {\n            this.setState({ ...this.props.entityInfo, comment: \"\" })\n        }\n        else {\n            if(this.props.modalCategory===\"Project\") {\n                const url = `http://${window.location.hostname}:3000/updateprojectdetails`\n                const { title, oldTitle, description, developers, testers, status, manager } = this.state\n                await axios.post(url, {title, oldTitle, description, status, developers, testers, manager})\n                .then((res) => {\n                    this.props.closeModal(\"closeModal\")\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n            }\n            else {\n                const url = `http://${window.location.hostname}:3000/updateticketdetails`\n                const { title, oldTitle, description, ['developer assigned']: developer, comment, status, priority } = this.state\n                const type = this.state.type.split(\" \")[0]\n                const prevDeveloper = this.props.entityInfo['developer assigned']\n                const { projectName } = this.props\n                await axios.post(url, { title, oldTitle, description, developer, prevDeveloper, comment, status, type, priority, projectName })\n                .then((res) => {\n                    this.setState({ comment: \"\" }, () => {\n                        this.props.updateEditModal(this.state.title)\n                    })\n                })\n                .catch((err) => {\n                    console.log(err)\n                })\n            }\n        }\n    }\n\n    render() {\n        const { modalCategory } = this.props\n        return(\n            <div className=\"editbox\">\n                <div className=\"editbox-header\">\n                    <div>\n                        <h1 className=\"text-center text-uppercase h1 my-0\"><strong>EDIT {modalCategory} DETAILS</strong></h1>\n                    </div>\n                </div>\n                <div className=\"editbox-footer\">\n                    <div className=\"editModalForm\">\n                        <form>\n                            <div className=\"editFormInputField mx-auto\">\n                                <TextField disabled={userRole===\"developer\" || (userRole===\"tester\" && modalCategory===\"Project\") ? true : false} value={this.state.title} onChange={this.editFormInputFieldChange} id=\"title\" className=\"fieldInnerDiv\" label={`${modalCategory} Title`} type=\"text\"/>\n                            </div>\n                            <div className=\"editFormInputField mx-auto\">\n                                <TextField disabled={userRole===\"developer\" || (userRole===\"tester\" && modalCategory===\"Project\") ? true : false} value={this.state.description} onChange={this.editFormInputFieldChange} id=\"description\" className=\"fieldInnerDiv\" label={`${modalCategory} Description`} type=\"text\"/>\n                            </div>\n                            <div className=\"editFormInputField mx-auto\">\n                                <FormControl className=\"fieldInnerDiv\">\n                                    <InputLabel>{modalCategory} Status</InputLabel>\n                                    <Select onChange={this.editFormSelectFieldChange} renderValue={() => capitalize(this.state.status)} value={this.state.status}>\n                                        <MenuItem disabled={this.state[\"developer assigned\"]!==\"---Not Assigned Yet---\" ? true : false} menuid=\"status\" value=\"Open\">Open</MenuItem>\n                                        {modalCategory===\"Project\" ? (<MenuItem disabled={userRole===\"developer\" || userRole===\"tester\" ? true : false} menuid=\"status\" value=\"Complete\">Complete</MenuItem>):(null)}\n                                        {modalCategory===\"Project\" ? (<MenuItem disabled={userRole===\"developer\" || userRole===\"tester\" ? true : false} menuid=\"status\" value=\"Abandoned\">Abandoned</MenuItem>):(null)}\n                                        {modalCategory===\"Ticket\" ? (<MenuItem menuid=\"status\" value=\"In Progress\">In Progress</MenuItem>):(null)}\n                                        {modalCategory===\"Ticket\" ? (<MenuItem menuid=\"status\" value=\"Pending Approval\">Pending Approval</MenuItem>):(null)}\n                                        {modalCategory===\"Ticket\" ? (<MenuItem disabled={userRole===\"developer\" || userRole===\"tester\" ? true : false} menuid=\"status\" value=\"Resolved\">Resolved</MenuItem>):(null)}\n                                    </Select>\n                                </FormControl>\n                            </div>\n\n                            {\n                                modalCategory===\"Ticket\" ? \n                                (<div className=\"editFormInputField mx-auto\">\n                                    <FormControl disabled={userRole===\"developer\" ? true : false} className=\"fieldInnerDiv\">\n                                        <InputLabel>{modalCategory} Type</InputLabel>\n                                        <Select onChange={this.editFormSelectFieldChange} renderValue={() => capitalize(this.state.type)} value={this.state.type}>\n                                            <MenuItem menuid=\"type\" value=\"Functional\">Functional</MenuItem>\n                                            <MenuItem menuid=\"type\" value=\"Performance\">Performance</MenuItem>\n                                            <MenuItem menuid=\"type\" value=\"Usability\">Usability</MenuItem>\n                                            <MenuItem menuid=\"type\" value=\"Compatibility\">Compatibility</MenuItem>\n                                            <MenuItem menuid=\"type\" value=\"Security\">Security</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>) : (null)\n                            }\n\n                            {\n                                modalCategory===\"Ticket\" ? \n                                (<div className=\"editFormInputField mx-auto\">\n                                    <FormControl disabled={userRole===\"developer\" ? true : false} className=\"fieldInnerDiv\">\n                                        <InputLabel>{modalCategory} Priority</InputLabel>\n                                        <Select onChange={this.editFormSelectFieldChange} renderValue={() => capitalize(this.state.priority)} value={this.state.priority}>\n                                            <MenuItem menuid=\"priority\" value=\"High\">High</MenuItem>\n                                            <MenuItem menuid=\"priority\" value=\"Medium\">Medium</MenuItem>\n                                            <MenuItem menuid=\"priority\" value=\"Low\">Low</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>) : (null)\n                            }\n\n                            { modalCategory===\"Project\" ?\n                                (<div className=\"editFormInputField mx-auto\">\n                                    <FormControl disabled={userRole===\"projectmanager\" || userRole===\"admin\" ? false : true} className=\"fieldInnerDiv\">\n                                        <InputLabel>Project Developers</InputLabel>\n                                        <Select multiple={modalCategory===\"project\" ? true : false} onChange={this.editFormSelectFieldChange} renderValue={() => this.state.developers.join(\", \")} value={this.state.developers}>\n                                            {\n                                                this.state.allDevs.map((dev) => {\n                                                    return <MenuItem menuid=\"developers\" value={dev}>{dev}</MenuItem>\n                                                })\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                </div>) :\n                                (<div className=\"editFormInputField mx-auto\">\n                                    <FormControl disabled={userRole===\"projectmanager\" ? false : true } className=\"fieldInnerDiv\">\n                                        <InputLabel>Assign a New Developer</InputLabel>\n                                        <Select onChange={this.editFormSelectFieldChange} renderValue={() => this.state[\"developer assigned\"]} value={this.state[\"developer assigned\"]}>\n                                            {\n                                                this.state.allDevs.map((dev) => {\n                                                    return <MenuItem menuid=\"developer assigned\" value={dev}>{dev}</MenuItem>\n                                                })\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                </div>)\n                            }\n\n                            { modalCategory===\"Project\" ? (<div className=\"editFormInputField mx-auto\">\n                                    <FormControl disabled={userRole===\"developer\" || userRole===\"tester\" ? true : false} className=\"fieldInnerDiv\">\n                                        <InputLabel>Project Testers</InputLabel>\n                                        <Select multiple onChange={this.editFormSelectFieldChange} renderValue={() => this.state.testers.join(\", \")} value={this.state.testers}>\n                                            {\n                                                this.state.allTesters.map((tester) => {\n                                                    return <MenuItem menuid=\"testers\" value={tester}>{tester}</MenuItem>\n                                                })\n                                            }\n                                        </Select>\n                                    </FormControl>\n                                </div>) : (null)\n                            }\n\n                            { modalCategory===\"Ticket\" ? (<div className=\"editFormInputField mx-auto\">\n                                <TextField value={this.state.comment} onChange={this.editFormInputFieldChange} id=\"comment\" className=\"fieldInnerDiv\" label=\"Add A New Comment to the Ticket\" type=\"text\"/>\n                            </div>) : (null)\n                            }\n                            \n                            <div className=\"editformButtonfield mx-auto\">\n                                <Button onClick={this.handleEditFormButtonClick} buttonid=\"reset\" size=\"large\" variant=\"contained\" color=\"primary\"><strong>RESET</strong></Button>\n                                <Button onClick={this.handleEditFormButtonClick} buttonid=\"submit\" size=\"large\" variant=\"contained\" color=\"secondary\"><strong>SUBMIT</strong></Button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Editbox","/home/reflxzr/Documents/React/bug-tracker/src/Components/Auxcomponents/deletebox.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":96,"column":55,"nodeType":"102","messageId":"103","endLine":96,"endColumn":88,"fix":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],["105"],["106"],"no-useless-computed-key","Unnecessarily computed property ['developer assigned'] found.","Property","unnecessarilyComputedProperty",{"range":"107","text":"108"},"no-global-assign","no-unsafe-negation",[3704,3726],"'developer assigned'"]